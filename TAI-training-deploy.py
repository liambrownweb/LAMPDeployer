#!/usr/bin/env python
# encoding: utf-8
'''
 -- shortdesc

 is a description

It defines classes_and_methods

@author:     Liam Brown

@copyright:  2013 organization_name. All rights reserved.

@license:    license

@contact:    liam.brown@techadv.com
@deffield    updated: Updated
'''

import sys
import os
sys.path.append('/usr/share/deployer')
import main.main
import deployer_cli
from optparse import OptionParser

__all__ = []
__version__ = 0.1
__date__ = '2013-01-16'
__updated__ = '2013-01-16'

DEBUG = 0
TESTRUN = 0
PROFILE = 0

def mainMethod(argv=None):
    '''Command line options.'''

    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright 2013 Technology Advisors, Inc. "
    if argv is None:
        argv = sys.argv[1:]
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
        parser.add_option("-r", "--replace", dest="replace_no", help="replace one instance", metavar="INT")
        parser.add_option("-b", "--batch", dest="instance_count", help="batch install n instances", metavar="INT")

        # set defaults
        parser.set_defaults(replace_no="None", instance_count="None")

        # process options
	userhome = os.getenv("HOME")
        (opts, args) = parser.parse_args(argv)
        options = {'-c': opts.replace_no,
                   '-s': '127.0.0.1',
                   '-u': 'root',
                   '-p': 'breakpoint',
                   '-i': 'sugartrainer',
                   '-r': '/www/htdocs/training',
                    '-f': userhome+'/TrainingTemplate.tar.gz'}
        cli = deployer_cli.cli()
        deployer = main.main.deployer(None)
        deployer.connectView(cli)
        if not opts.instance_count == 'None':
	    options['-c'] = opts.instance_count
            deployer.deploy(options)
        else:
            if not opts.replace_no == 'None':
		options['-c'] = opts.replace_no
  	        print("Replacing one instance...")
                deployer.replace(options)

        # MAIN BODY #

    except Exception, e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2


if __name__ == "__main__":
    if DEBUG:
        sys.argv.append("-h")
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = '_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    mainMethod()
    sys.exit()
